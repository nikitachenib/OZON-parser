import asyncio
from playwright.async_api import async_playwright
import pandas as pd
from datetime import datetime
import os
import psutil
import subprocess
import time

class OzonPvzBot:
    def __init__(self):
        self.browser = None
        self.page = None
        self.playwright = None
    
    def find_opened_edge_windows(self):
        """–ü–æ–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω Edge —Å turbo-pvz.ozon.ru"""
        print("üîç –ò—â—É –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ Microsoft Edge...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Edge
            edge_processes = []
            for process in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if process.info['name'] and 'msedge' in process.info['name'].lower():
                        edge_processes.append(process.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if not edge_processes:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Edge")
                return False
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Edge: {len(edge_processes)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∫–Ω–æ —Å turbo-pvz.ozon.ru
            for process in edge_processes:
                if process['cmdline']:
                    cmdline = ' '.join(process['cmdline'])
                    if 'turbo-pvz.ozon.ru' in cmdline:
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ —Å turbo-pvz.ozon.ru")
                        return True
            
            print("‚ÑπÔ∏è  –û–∫–Ω–æ —Å turbo-pvz.ozon.ru –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ Edge –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return False
    
    async def connect_to_existing_edge(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–∫–Ω—É Edge"""
        print("üîó –ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Edge...")
        
        self.playwright = await async_playwright().start()
        
        # –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ CDP
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Edge
            self.browser = await self.playwright.chromium.connect_over_cdp("http://localhost:9222")
            contexts = self.browser.contexts
            
            if contexts:
                for context in contexts:
                    pages = context.pages
                    if pages:
                        for page in pages:
                            if "turbo-pvz.ozon.ru" in page.url:
                                self.page = page
                                print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ turbo-pvz.ozon.ru")
                                return True
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                self.page = contexts[0].pages[0] if contexts[0].pages else await contexts[0].new_page()
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∫–ª–∞–¥–∫—É")
                return True
                
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ CDP: {e}")
        
        # –°–ø–æ—Å–æ–± 2: –ó–∞–ø—É—Å–∫–∞–µ–º Edge —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º
        print("üîÑ –ü—Ä–æ–±—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å Edge —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º...")
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Edge (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
            subprocess.run(['taskkill', '/f', '/im', 'msedge.exe'], capture_output=True)
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Edge —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –ø–æ—Ä—Ç–æ–º
            edge_path = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
            if not os.path.exists(edge_path):
                edge_path = r"C:\Program Files\Microsoft\Edge\Application\msedge.exe"
            
            subprocess.Popen([
                edge_path,
                '--remote-debugging-port=9222',
                '--user-data-dir=./edge_profile',
                'https://turbo-pvz.ozon.ru/'
            ])
            
            time.sleep(5)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É
            self.browser = await self.playwright.chromium.connect_over_cdp("http://localhost:9222")
            self.page = self.browser.contexts[0].pages[0] if self.browser.contexts[0].pages else await self.browser.contexts[0].new_page()
            
            print("‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª Edge —Å –æ—Ç–ª–∞–¥–∫–æ–π –∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")
            return True
            
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Edge —Å –æ—Ç–ª–∞–¥–∫–æ–π: {e}")
        
        # –°–ø–æ—Å–æ–± 3: –†—É—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üëÜ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Microsoft Edge –æ—Ç–∫—Ä—ã—Ç")
        print("2. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ turbo-pvz.ozon.ru")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö —à–∞–≥–æ–≤...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(channel="msedge", headless=False)
            contexts = self.browser.contexts
            
            if contexts and contexts[0].pages:
                self.page = contexts[0].pages[0]
                print("‚úÖ –ù–∞—à–µ–ª –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ Edge")
                return True
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
                self.page = await self.browser.new_page()
                await self.page.goto("https://turbo-pvz.ozon.ru/")
                print("‚úÖ –°–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Å–∞–π—Ç–æ–º")
                return True
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def ensure_correct_page(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        current_url = self.page.url
        
        if "turbo-pvz.ozon.ru" not in current_url:
            print("üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ turbo-pvz.ozon.ru...")
            await self.page.goto("https://turbo-pvz.ozon.ru/", wait_until="networkidle")
            await self.page.wait_for_timeout(1000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if "auth" in self.page.url.lower() or "login" in self.page.url.lower():
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            await self.page.goto("https://turbo-pvz.ozon.ru/", wait_until="networkidle")
        
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
    
    #####################################################################################################################
    
    async def navigate_to_shipment_transport(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –û—Ç–ø—Ä–∞–≤–∫–∞ -> –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫"""
        print("üìÇ –ò—â—É —Ä–∞–∑–¥–µ–ª '–û—Ç–ø—Ä–∞–≤–∫–∞'...")
        
        await self.page.wait_for_timeout(2000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
        current_url = self.page.url
    #    if "outbound" in current_url and ("transport" in current_url or "id=-1000" in current_url):
    #        print("‚úÖ –£–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
    #       return True
        
        # –ï—Å–ª–∏ –º—ã –≤ –æ–±—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤–æ–∑–æ–∫
        if "outbound" in current_url and "id=-1000" in current_url:
            print("‚ÑπÔ∏è  –í —Ä–∞–∑–¥–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö")
            return await self.select_shipment_transport()
        
        # –®–∞–≥ 1: –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∫–∞" –≤ –º–µ–Ω—é
        shipment_selectors = [
            "a[href*='outbound']",
            "text=–û—Ç–ø—Ä–∞–≤–∫–∞",
            "a:has-text('–û—Ç–ø—Ä–∞–≤–∫–∞')", 
            "li:has-text('–û—Ç–ø—Ä–∞–≤–∫–∞')",
            "div:has-text('–û—Ç–ø—Ä–∞–≤–∫–∞')",
            "[class*='shipment']",
        ]
        
        for selector in shipment_selectors:
            try:
                await self.page.click(selector, timeout=5000)
                print(f"‚úÖ –ù–∞–∂–∞–ª –Ω–∞ '–û—Ç–ø—Ä–∞–≤–∫–∞': {selector}")
                await self.page.wait_for_timeout(3000)
                
                # –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ –û—Ç–ø—Ä–∞–≤–∫–∞, —Å—Ä–∞–∑—É –∏—â–µ–º –ø–µ—Ä–µ–≤–æ–∑–∫–∏
                return await self.select_shipment_transport()
                        
            except Exception as e:
                continue
        
        print("‚ùå –†–∞–∑–¥–µ–ª '–û—Ç–ø—Ä–∞–≤–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return False

    async def select_shipment_transport(self):
        """–í—ã–±–æ—Ä –ø–æ–¥–ø—É–Ω–∫—Ç–∞ '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫' –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –û—Ç–ø—Ä–∞–≤–∫–∞"""
        print("üöö –ò—â—É –ø–æ–¥–ø—É–Ω–∫—Ç '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫'...")
        
        await self.page.wait_for_timeout(1000)
        
        transport_selectors = [
            "text=–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫",
            "text=–ø–µ—Ä–µ–≤–æ–∑–æ–∫",
            "a:has-text('–ø–µ—Ä–µ–≤–æ–∑–æ–∫')",
            "div:has-text('–ø–µ—Ä–µ–≤–æ–∑–æ–∫')",
            "button:has-text('–ø–µ—Ä–µ–≤–æ–∑–æ–∫')",
            "[class*='transport']",
            "[class*='–ø–µ—Ä–µ–≤–æ–∑–æ–∫']",
            "a[href*=id=-1001]",
        ]
        
        for selector in transport_selectors:
            try:
                await self.page.click(selector, timeout=5000)
                print(f"‚úÖ –ù–∞–∂–∞–ª –Ω–∞ '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫': {selector}")
                await self.page.wait_for_timeout(1000)
                return True
            except Exception as e:
                continue
        
        print("‚ùå –ü–æ–¥–ø—É–Ω–∫—Ç '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return False

    async def select_flow_type(self, flow_type):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞"""
        print(f"üîò –ò—â—É —Ç–∏–ø –ø–æ—Ç–æ–∫–∞: {flow_type}...")
        
        await self.page.wait_for_timeout(2000)
        
        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Ç–æ–∫–æ–≤
        flow_elements = await self.page.query_selector_all("div._flowType_16tx4_203")
        
        for element in flow_elements:
            try:
                text = await element.text_content()
                if flow_type in text:
                    await element.click()
                    print(f"‚úÖ –í—ã–±—Ä–∞–ª: {flow_type}")
                    await self.page.wait_for_timeout(2000)
                    return True
            except Exception as e:
                continue
        
        print(f"‚ùå –¢–∏–ø –ø–æ—Ç–æ–∫–∞ '{flow_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        return False

    async def find_target_block_with_informer(self):
        """–ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º '–î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫—É'"""
        print("üîç –ò—â—É –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º '–î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫—É'...")
        
        await self.page.wait_for_timeout(3000)
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º _block_4j0aa_1
        blocks = await self.page.query_selector_all("div._block_4j0aa_1")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ _block_4j0aa_1: {len(blocks)}")
        
        for i, block in enumerate(blocks):
            try:
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                informer_text = await block.inner_text()
                if "–î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫—É" in informer_text:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –±–ª–æ–∫ (–±–ª–æ–∫ #{i + 1}) —Å –Ω—É–∂–Ω—ã–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º")
                    return block
            except Exception as e:
                continue
        
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º '–î–æ–±–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫—É'")
        return None

    async def extract_items_before_locked_section(self, target_block):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'"""
        print("üì¶ –ò—â—É —Ç–æ–≤–∞—Ä—ã –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'...")
        
        items_data = []
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–ª–æ–∫–µ
            all_elements = await target_block.query_selector_all("div._element_16tx4_1")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_elements)}")
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            for i, element in enumerate(all_elements):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
                    is_locked = await element.query_selector("div._locked_16tx4_13") is not None
                    
                    if not is_locked:
                        item_data = await self.parse_item(element, i, "—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
                        if item_data:
                            items_data.append(item_data)
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {item_data['–ù–∞–∑–≤–∞–Ω–∏–µ'][:50]}...")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                    continue
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(items_data)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        
        return items_data

    async def parse_item(self, item_element, index, status):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name_element = await item_element.query_selector("div._titleWrap_1ailj_14")
            name = await name_element.text_content() if name_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –®—Ç—Ä–∏—Ö–∫–æ–¥
            barcode_element = await item_element.query_selector("div._barcode_1ailj_7")
            barcode_text = await barcode_element.text_content() if barcode_element else ""
            barcode = barcode_text.replace("–®—Ç—Ä–∏—Ö–∫–æ–¥:", "").strip() if barcode_text else "–ù–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—è—á–µ–π–∫–∞)
            location_element = await item_element.query_selector("div._address_1ailj_28 .ozi__badge__label__Rb41r")
            location = await location_element.text_content() if location_element else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –¢–∏–ø –ø–æ—Ç–æ–∫–∞
            flow_element = await item_element.query_selector("div._flowType_16tx4_203")
            flow_type = await flow_element.text_content() if flow_element else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
            # –¶–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            color_element = await item_element.query_selector("div._flex_lxoww_1 div:last-child")
            color = await color_element.text_content() if color_element else ""
            
            # –†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
            size = ""
            content_element = await item_element.query_selector("div._content_1ailj_36")
            if content_element:
                content_text = await content_element.text_content()
                if "–†–∞–∑–º–µ—Ä" in content_text:
                    size_parts = content_text.split("–†–∞–∑–º–µ—Ä")
                    if len(size_parts) > 1:
                        size = size_parts[1].strip().split('\n')[0]
            
            # –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            is_locked = await item_element.query_selector("div._locked_16tx4_13") is not None
            lock_status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_locked else "–î–æ—Å—Ç—É–ø–µ–Ω"
            
            return {
                '‚Ññ': index + 1,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': name.strip(),
                '–®—Ç—Ä–∏—Ö–∫–æ–¥': barcode,
                '–Ø—á–µ–π–∫–∞': location,
                '–¢–∏–ø_–ø–æ—Ç–æ–∫–∞': flow_type,
                '–¶–≤–µ—Ç': color.strip(),
                '–†–∞–∑–º–µ—Ä': size.strip(),
                '–°—Ç–∞—Ç—É—Å_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏': lock_status,
                '–°—Ç–∞—Ç—É—Å_–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è': status
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {index}: {e}")
            return None

    async def run(self, flow_type="–ü—Ä—è–º–æ–π –ø–æ—Ç–æ–∫"):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        try:
            if not await self.connect_to_existing_edge():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Edge")
                return
            
            print(f"üéØ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {flow_type}")
            print("üìã –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:")
            print("1. –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–û—Ç–ø—Ä–∞–≤–∫–∞'")
            print("2. –í—ã–±–æ—Ä '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫'")
            print("3. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞")
            print("4. –°–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if not await self.ensure_correct_page():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return
            
            # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –û—Ç–ø—Ä–∞–≤–∫–∞ -> –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–∑–æ–∫
            if not await self.navigate_to_shipment_transport():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–∑–æ–∫")
                
                # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥
                print("üîÑ –ü—Ä–æ–±—É—é –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–≤–æ–∑–æ–∫...")
                await self.page.goto("https://turbo-pvz.ozon.ru/outbound?id=-1000", wait_until="networkidle")
                await self.page.wait_for_timeout(5000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                current_url = self.page.url
                print(f"üåê –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: {current_url}")
                
                if "transport" not in current_url and "id=-1000" not in current_url:
                    print("‚ùå –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–µ–≤–æ–∑–æ–∫
            current_url = self.page.url
            print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞
            if not await self.select_flow_type(flow_type):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ—Ç–æ–∫–∞ '{flow_type}'")
                return
            
            # –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º
            target_block = await self.find_target_block_with_informer()
            if not target_block:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –±–ª–æ–∫")
                return
            
            # –®–∞–≥ 4: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –î–û —Å–µ–∫—Ü–∏–∏ "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞"
            print("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'...")
            items_data = await self.extract_items_before_locked_section(target_block)
            
            if not items_data:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –î–û –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏")
                return
            
            self.display_results(items_data, flow_type)
            self.save_to_files(items_data, flow_type)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.close()
            print("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def display_results(self, items_data, flow_type):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*80}")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {flow_type}")
        print(f"üëâ –¢–æ–≤–∞—Ä–æ–≤ –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞': {len(items_data)}")
        print(f"{'='*80}")
        
        for item in items_data:
            print(f"\n{item['‚Ññ']}. {item['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
            print(f"   üìç –Ø—á–µ–π–∫–∞: {item['–Ø—á–µ–π–∫–∞']}")
            print(f"   üè∑Ô∏è  –®—Ç—Ä–∏—Ö–∫–æ–¥: {item['–®—Ç—Ä–∏—Ö–∫–æ–¥']}")
            print(f"   üîÑ –¢–∏–ø –ø–æ—Ç–æ–∫–∞: {item['–¢–∏–ø_–ø–æ—Ç–æ–∫–∞']}")
            if item['–¶–≤–µ—Ç']:
                print(f"   üé® –¶–≤–µ—Ç: {item['–¶–≤–µ—Ç']}")
            if item['–†–∞–∑–º–µ—Ä']:
                print(f"   üìè –†–∞–∑–º–µ—Ä: {item['–†–∞–∑–º–µ—Ä']}")
            print(f"   üîí –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {item['–°—Ç–∞—Ç—É—Å_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏']}")

    def save_to_files(self, items_data, flow_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª—ã"""
        if not items_data:
            return
        
        os.makedirs("results", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        base_filename = f"results/ozon_shipment_{flow_type.replace(' ', '_')}_{timestamp}"
        
        # Excel
        df = pd.DataFrame(items_data)
        excel_filename = f"{base_filename}.xlsx"
        df.to_excel(excel_filename, index=False)
        print(f"üíæ Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_filename}")
        
        # TXT
        txt_filename = f"{base_filename}.txt"
        with open(txt_filename, 'w', encoding='utf-8') as f:
            f.write(f"–û–¢–ß–ï–¢: {flow_type}\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
            f.write(f"–¢–æ–≤–∞—Ä–æ–≤ –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞': {len(items_data)}\n")
            f.write("=" * 60 + "\n\n")
            
            for i, item in enumerate(items_data, 1):
                f.write(f"–¢–û–í–ê–† #{i}\n")
                f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n")
                f.write(f"–Ø—á–µ–π–∫–∞: {item['–Ø—á–µ–π–∫–∞']}\n")
                f.write(f"–®—Ç—Ä–∏—Ö–∫–æ–¥: {item['–®—Ç—Ä–∏—Ö–∫–æ–¥']}\n")
                f.write(f"–¢–∏–ø –ø–æ—Ç–æ–∫–∞: {item['–¢–∏–ø_–ø–æ—Ç–æ–∫–∞']}\n")
                if item['–¶–≤–µ—Ç']:
                    f.write(f"–¶–≤–µ—Ç: {item['–¶–≤–µ—Ç']}\n")
                if item['–†–∞–∑–º–µ—Ä']:
                    f.write(f"–†–∞–∑–º–µ—Ä: {item['–†–∞–∑–º–µ—Ä']}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {item['–°—Ç–∞—Ç—É—Å_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏']}\n")
                f.write("-" * 40 + "\n\n")

    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ë–æ—Ç –¥–ª—è –¢—É—Ä–±–æ –ü–í–ó")
    print("üëâ –°–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –î–û —Å–µ–∫—Ü–∏–∏ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'")
    print("=" * 50)
    
    print("–¢–∏–ø—ã –ø–æ—Ç–æ–∫–æ–≤:")
    print("1 - –ü—Ä—è–º–æ–π –ø–æ—Ç–æ–∫")
    print("2 - –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "2":
        flow_type = "–í–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫"
    else:
        flow_type = "–ü—Ä—è–º–æ–π –ø–æ—Ç–æ–∫"
    
    bot = OzonPvzBot()
    await bot.run(flow_type)

if __name__ == "__main__":
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright pandas openpyxl psutil")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüö´ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
